{
	"name": "rmg",
	"displayName": "react-module-generator",
	"description": "generate react modules ðŸ¤¯",
	"icon": "images/logo.png",
	"galleryBanner": {
		"color": "#ff69b4",
		"theme": "dark"
	},
	"bugs": {
		"url": "https://github.com/jonathonhawkins92/React-Module-Generator/issues"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/jonathonhawkins92/React-Module-Generator"
	},
	"license": "MIT",
	"publisher": "goblin",
	"version": "0.2.4",
	"engines": {
		"vscode": "^1.61.0"
	},
	"categories": [
		"Snippets"
	],
	"keywords": [
		"React",
		"Module",
		"Snippet",
		"File"
	],
	"activationEvents": [
		"onCommand:rmg.create",
		"onCommand:rmg.add"
	],
	"main": "./dist/extension.js",
	"contributes": {
		"configuration": {
			"title": "RMG",
			"type": "object",
			"properties": {
				"rmg.global.endOfLineSequence": {
					"type": "string",
					"default": "lf",
					"enum": [
						"lf",
						"crlf",
						"cr"
					],
					"markdownDescription": "What style of end of line character we will use.",
					"description": "What style of end of line character we will use.",
					"scope": "resource"
				},
				"rmg.component.imports": {
					"type": "array",
					"default": [],
					"markdownDescription": "A list of imports, eg `import * as React from \"react\";`",
					"description": "A list of imports, eg `import * as React from \"react\";`",
					"scope": "resource"
				},
				"rmg.component.export.type": {
					"type": "string",
					"enum": [
						"all",
						"named",
						"default",
						"defaultNamed"
					],
					"default": "named",
					"markdownDescription": "How we will export and then import your file.",
					"description": "How we will export and then import your file.",
					"scope": "resource"
				},
				"rmg.component.export.extension": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Enable/disable the file extension when importing.",
					"description": "Enable/disable the file extension when importing.",
					"scope": "resource"
				},
				"rmg.component.export.alias": {
					"type": "string",
					"default": "component",
					"markdownDescription": "The name used when importing the component, we fallback to component.",
					"description": "The name used when importing the component, we fallback to component.",
					"scope": "resource"
				},
				"rmg.component.file.name": {
					"type": "string",
					"markdownDescription": "The name given to your component's file, we fallback to the module's name.",
					"description": "The name given to your component's file, we fallback to the module's name.",
					"scope": "resource"
				},
				"rmg.component.file.extension": {
					"type": "string",
					"default": ".tsx",
					"markdownDescription": "The type of file you are creating, we fallback to `.tsx`.",
					"description": "The type of file you are creating, we fallback to `.tsx`.",
					"scope": "resource"
				},
				"rmg.barrel.include": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Enable/disable the addition of a barrel file.",
					"description": "Enable/disable the addition of a barrel file.",
					"scope": "resource"
				},
				"rmg.barrel.imports": {
					"type": "array",
					"default": [],
					"markdownDescription": "A list of imports, eg `import * as React from \"react\";`",
					"description": "A list of imports, eg `import * as React from \"react\";`",
					"scope": "resource"
				},
				"rmg.barrel.export.type": {
					"type": "string",
					"enum": [
						"all",
						"named",
						"default",
						"defaultNamed"
					],
					"default": "all",
					"markdownDescription": "How we will export and then import your file.",
					"description": "How we will export and then import your file.",
					"scope": "resource"
				},
				"rmg.barrel.export.extension": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Enable/disable the file extension when importing.",
					"description": "Enable/disable the file extension when importing.",
					"scope": "resource"
				},
				"rmg.barrel.export.alias": {
					"type": "string",
					"default": "barrel",
					"markdownDescription": "The name used when importing the barrel, we fallback to `barrel`.",
					"description": "The name used when importing the barrel, we fallback to `barrel`.",
					"scope": "resource"
				},
				"rmg.barrel.file.name": {
					"type": "string",
					"default": "index",
					"markdownDescription": "The name given to your barrel's file, we fallback to `index` then to the module's name.",
					"description": "The name given to your barrel's file, we fallback to `index` then to the module's name.",
					"scope": "resource"
				},
				"rmg.barrel.file.extension": {
					"type": "string",
					"default": ".ts",
					"markdownDescription": "The type of file you are creating, we fallback to `.ts`.",
					"description": "The type of file you are creating, we fallback to `.ts`.",
					"scope": "resource"
				},
				"rmg.style.include": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Enable/disable the addition of a style file and importing of said file in component.",
					"description": "Enable/disable the addition of a style file and importing of said file in component.",
					"scope": "resource"
				},
				"rmg.style.imports": {
					"type": "array",
					"default": [],
					"markdownDescription": "A list of imports, eg `import * as React from \"react\";`",
					"description": "A list of imports, eg `import * as React from \"react\";`",
					"scope": "resource"
				},
				"rmg.style.export.type": {
					"type": "string",
					"enum": [
						"all",
						"named",
						"default",
						"defaultNamed"
					],
					"default": "default",
					"markdownDescription": "How we will export and then import your file.",
					"description": "How we will export and then import your file.",
					"scope": "resource"
				},
				"rmg.style.export.extension": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Enable/disable the file extension when importing.",
					"description": "Enable/disable the file extension when importing.",
					"scope": "resource"
				},
				"rmg.style.export.alias": {
					"type": "string",
					"default": "style",
					"markdownDescription": "The name used when importing the style, we fallback to `style`.",
					"description": "The name used when importing the style, we fallback to `style`.",
					"scope": "resource"
				},
				"rmg.style.file.name": {
					"type": "string",
					"markdownDescription": "The name given to your style's file, we fallback to the module's name.",
					"description": "The name given to your style's file, we fallback to the module's name.",
					"scope": "resource"
				},
				"rmg.style.file.extension": {
					"type": "string",
					"default": ".module.css",
					"markdownDescription": "The type of file you are creating, we fallback to `.module.css`.",
					"description": "The type of file you are creating, we fallback to `.module.css`.",
					"scope": "resource"
				},
				"rmg.translation.include": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Enable/disable the addition of a translation file and importing of said file in component.",
					"description": "Enable/disable the addition of a translation file and importing of said file in component.",
					"scope": "resource"
				},
				"rmg.translation.imports": {
					"type": "array",
					"default": [],
					"markdownDescription": "A list of imports, eg `import * as React from \"react\";`",
					"description": "A list of imports, eg `import * as React from \"react\";`",
					"scope": "resource"
				},
				"rmg.translation.export.type": {
					"type": "string",
					"enum": [
						"all",
						"named",
						"default",
						"defaultNamed"
					],
					"default": "named",
					"markdownDescription": "How we will export and then import your file.",
					"description": "How we will export and then import your file.",
					"scope": "resource"
				},
				"rmg.translation.export.extension": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Enable/disable the file extension when importing.",
					"description": "Enable/disable the file extension when importing.",
					"scope": "resource"
				},
				"rmg.translation.export.alias": {
					"type": "string",
					"default": "translation",
					"markdownDescription": "The name used when importing the translation, we fallback to `translation`.",
					"description": "The name used when importing the translation, we fallback to `translation`.",
					"scope": "resource"
				},
				"rmg.translation.file.name": {
					"type": "string",
					"markdownDescription": "The name given to your translation's file, we fallback to the module's name.",
					"description": "The name given to your translation's file, we fallback to the module's name.",
					"scope": "resource"
				},
				"rmg.translation.file.extension": {
					"type": "string",
					"default": ".intl.ts",
					"markdownDescription": "The type of file you are creating, we fallback to `.intl.ts`.",
					"description": "The type of file you are creating, we fallback to `.intl.ts`.",
					"scope": "resource"
				},
				"rmg.test.include": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Enable/disable the addition of a test file.",
					"description": "Enable/disable the addition of a test file.",
					"scope": "resource"
				},
				"rmg.test.imports": {
					"type": "array",
					"default": [
						"import * as RTL from \"@testing-library/react\";",
						"import * as React from \"react\";",
						"import \"@testing-library/jest-dom\";"
					],
					"markdownDescription": "A list of imports, eg `import * as React from \"react\";`",
					"description": "A list of imports, eg `import * as React from \"react\";`",
					"scope": "resource"
				},
				"rmg.test.export.type": {
					"type": "string",
					"enum": [
						"all",
						"named",
						"default",
						"defaultNamed"
					],
					"default": "all",
					"markdownDescription": "How we will export and then import your file.",
					"description": "How we will export and then import your file.",
					"scope": "resource"
				},
				"rmg.test.export.extension": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Enable/disable the file extension when importing.",
					"description": "Enable/disable the file extension when importing.",
					"scope": "resource"
				},
				"rmg.test.export.alias": {
					"type": "string",
					"default": "test",
					"markdownDescription": "The name used when importing the test, we fallback to `test`.",
					"description": "The name used when importing the test, we fallback to `test`.",
					"scope": "resource"
				},
				"rmg.test.file.name": {
					"type": "string",
					"markdownDescription": "The name given to your test's file, we fallback to the module's name.",
					"description": "The name given to your test's file, we fallback to the module's name.",
					"scope": "resource"
				},
				"rmg.test.file.extension": {
					"type": "string",
					"default": ".test.ts",
					"markdownDescription": "The type of file you are creating, we fallback to `.test.ts`.",
					"description": "The type of file you are creating, we fallback to `.test.ts`.",
					"scope": "resource"
				}
			}
		},
		"commands": [
			{
				"command": "rmg.create",
				"title": "RMG: Create"
			},
			{
				"command": "rmg.add",
				"title": "RMG: Add"
			}
		],
		"menus": {
			"explorer/context": [
				{
					"command": "rmg.create",
					"group": "RMG"
				},
				{
					"command": "rmg.add",
					"group": "RMG"
				}
			]
		}
	},
	"scripts": {
		"vscode:prepublish": "npm run package",
		"debug": "node ./node_modules/webpack/bin/webpack --watch",
		"build": "webpack",
		"watch": "webpack --watch",
		"package": "webpack --mode production --devtool hidden-source-map",
		"build-tests": "tsc -p . --outDir out",
		"watch-tests": "tsc -p . -w --outDir out",
		"pretest": "npm run build-tests && npm run build && npm run lint",
		"lint": "eslint src --ext ts",
		"test": "node ./out/test/runTest.js"
	},
	"devDependencies": {
		"@types/glob": "^7.1.4",
		"@types/mocha": "^9.0.0",
		"@types/node": "14.x",
		"@types/vscode": "^1.61.0",
		"@typescript-eslint/eslint-plugin": "^5.1.0",
		"@typescript-eslint/parser": "^5.1.0",
		"@vscode/test-electron": "^1.6.2",
		"eslint": "^8.1.0",
		"glob": "^7.1.7",
		"mocha": "^9.1.3",
		"ts-loader": "^9.2.5",
		"typescript": "^4.4.4",
		"webpack": "^5.52.1",
		"webpack-cli": "^4.8.0"
	},
	"dependencies": {
		"ts-node": "^10.4.0"
	}
}